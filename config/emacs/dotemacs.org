#+TITLE: heymatthenry's emacs config
#+AUTHOR: matt henry
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Mission critical

** Load elpaca for package management

This comes directly from [[https://github.com/progfolio/elpaca][Elpaca's github repo]]

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.4)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				 :ref nil
				 :files (:defaults (:exclude "extensions"))
				 :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	  (build (expand-file-name "elpaca/" elpaca-builds-directory))
	  (order (cdr elpaca-order))
	  (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	   (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		    ((zerop (call-process "git" nil buffer t "clone"
					  (plist-get order :repo) repo)))
		    ((zerop (call-process "git" nil buffer t "checkout"
					  (or (plist-get order :ref) "--"))))
		    (emacs (concat invocation-directory invocation-name))
		    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					  "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		    ((require 'elpaca))
		    ((elpaca-generate-autoloads "elpaca" repo)))
	       (kill-buffer buffer)
	     (error "%s" (with-current-buffer buffer (buffer-string))))
	 ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Configure elpaca to use ~use-package~

#+begin_src emacs-lisp
  ;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Evil ðŸ¤˜

#+begin_src emacs-lisp
  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-minibuffer t)

    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src

** VCS

Doom-style gitgutter config, cribbed entirely from [[https://ianyepan.github.io/posts/emacs-git-gutter/][this blog post]]

#+begin_src emacs-lisp
  (use-package magit)

  (use-package git-gutter
      :hook (prog-mode . git-gutter-mode)
      :config
      (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
      :config
      (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* UI ðŸ’…

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil
:font "JuliaMono"
    :height 140
    :weight 'medium)
    (set-face-attribute 'variable-pitch nil
    :font "Source Sans Pro"
    :height 160
    :weight 'medium)
    (set-face-attribute 'fixed-pitch nil
    :font "JuliaMono"
    :height 140
    :weight 'medium)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Pretty icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** File drawer

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-position 'right)))

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-magit
    :after (treemacs magit))
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Remove UI cruft

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

* Put the Mac in emacs

#+begin_src emacs-lisp
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+end_src

* Keybindings

** Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** General

#+begin_src emacs-lisp
  (defun find-in-config-dir ()
    (interactive)
    (find-file user-emacs-directory))

  (defun reload-user-config ()
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer mh/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (mh/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer")

      "f" '(:ignore t :wk "find")
      "ff" '(helm-find-files :wk "Find file")
      "fp" '(find-in-config-dir :wk "Open personal config")
      "fr" '(reload-user-config :wk "Reload personal config")

      "g" '(:ignore t :wk "git")
      "gg" '(magit-status :wk "Magit status")
      "gn" '(git-gutter:next-hunk :wk "Next hunk")
      "gp" '(git-gutter:previous-hunk :wk "Previous hunk")
      "gh" '(:ignore t :wk "git hunk")
      "ghs" '(git-gutter:stage-hunk :wk "Next hunk")
      "ghr" '(git-gutter:revert-hunk :wk "Revert hunk")

      "p" '(:ignore t :wk "projectile")
      "pp" '(helm-projectile-switch-project :wk "Switch to project")
      "pf" '(helm-projectile-find-file :wk "Find file in project")
      "pt" '(treemacs :wk "Open project drawer")
      )

    (mh/leader-keys
      'normal org-mode-map
      "te" (toggle-emphasis-markers :wk "Toggle display of emphasis markers"))
  )
#+end_src

** Vanilla keybinds

#+begin_src emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
#+end_src

* Snippets and autocomplete

Company is the popup/autocomplete library.

#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode))
#+end_src

yasnippet has the snippets that company mode uses to autocomplete stuff.

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
  (use-package auto-yasnippet)

#+end_src

#+begin_src emacs-lisp
  (use-package helm
    :config
    (helm-mode 1))
#+end_src

* TODO Add projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1))

  (use-package helm-projectile
    :config
    (helm-projectile-on))
#+end_src

* TODO Add lsp

** Language configuration

#+begin_src emacs-lisp
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

** LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
	   (web-mode . lsp)

	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

* TODO Configure org

Hide /emphasis/ *markers*. Or =verbatim=. ~Code~. Or +forget the whole thing+

#+begin_src emacs-lisp
  (defun toggle-emphasis-markers ()
      (interactive)
      (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
      (font-lock-update))
#+end_src

#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-hide-emphasis-markers t)
#+end_src
