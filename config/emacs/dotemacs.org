#+TITLE: heymatthenry's emacs config
#+AUTHOR: matt henry
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Contents :TOC:
- [[#mission-critical][Mission critical]]
  - [[#load-elpaca-for-package-management][Load elpaca for package management]]
  - [[#load-path][Load ~$PATH~]]
  - [[#configure-core-emacs-functions][Configure core emacs functions]]
  - [[#evil-][Evil ðŸ¤˜]]
  - [[#vcs][VCS]]
- [[#ui-][UI ðŸ’…]]
  - [[#startup-screen][Startup screen]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#pretty-icons][Pretty icons]]
  - [[#file-drawer][File drawer]]
  - [[#modeline][Modeline]]
  - [[#remove-ui-cruft][Remove UI cruft]]
- [[#put-the-mac-in-emacs][Put the Mac in emacs]]
- [[#keybindings][Keybindings]]
  - [[#which-key][Which-Key]]
  - [[#general][General]]
  - [[#vanilla-keybinds][Vanilla keybinds]]
- [[#snippets-and-autocomplete][Snippets and autocomplete]]
- [[#projectile][Projectile]]
- [[#ide-features][IDE Features]]
  - [[#language-configuration][Language configuration]]
  - [[#treesitter][Treesitter]]
  - [[#lsp][LSP]]
  - [[#configure-formatters-eslint-etc][Configure formatters (eslint, etc.)]]
  - [[#add-emmet][Add emmet]]
- [[#org-mode][Org Mode]]
  - [[#directory-setup][Directory setup]]
  - [[#appearance][Appearance]]
- [[#terminal-support][Terminal support]]
- [[#pdfs][PDFs]]

* Mission critical

#+begin_src emacs-lisp
  (add-to-list 'load-path
	       (expand-file-name "lib" user-emacs-directory)) 
#+end_src

** Load elpaca for package management

#+begin_src emacs-lisp
(require 'load-and-configure-elpaca)
#+end_src

** Load ~$PATH~

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Configure core emacs functions

Don't create backup files clutter and don't ask me about killing processes

#+begin_src emacs-lisp
  (setq confirm-kill-processes nil	
	create-lockfiles nil ; don't create .# files (crashes 'npm start')
	make-backup-files nil)
#+end_src

** Evil ðŸ¤˜

#+begin_src emacs-lisp
  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-minibuffer t)

    (with-eval-after-load 'evil-maps
      (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
      (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
      (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
      (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

      (define-key evil-normal-state-map "P" 'counsel-yank-pop))

    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-tutor)
#+end_src

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src

** VCS

Doom-style gitgutter config, cribbed entirely from [[https://ianyepan.github.io/posts/emacs-git-gutter/][this blog post]]

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

#+begin_src emacs-lisp
  (use-package git-gutter
      :hook (prog-mode . git-gutter-mode)
      :config
      (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
      :config
      (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* UI ðŸ’…

** Startup screen

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-items '((recents  . 5)
			  (bookmarks . 5)
			  (projects . 5)
			  (agenda . 5)
			  (registers . 5)))

  (setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)

  (setq dashboard-set-navigator t)

  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
      :font "JuliaMono"
      :height 140
      :weight 'medium)

  (set-face-attribute 'variable-pitch nil
      :font "Source Sans Pro"
      :height 160
      :weight 'medium)

  (set-face-attribute 'fixed-pitch nil
      :font "JuliaMono"
      :height 140
      :weight 'medium)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-nord-aurora t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Pretty icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** File drawer

#+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :config

      (progn
	(setq treemacs-position 'right)))

    (use-package treemacs-evil
      :after (treemacs evil))

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once))

    (use-package treemacs-magit
      :after (treemacs magit))
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Remove UI cruft

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

* Put the Mac in emacs

#+begin_src emacs-lisp
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+end_src

* Keybindings

** Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** General

#+begin_src emacs-lisp
  (defun open-user-config ()
    (interactive)
    (find-file (concat user-emacs-directory "dotemacs.org")))

  (defun reload-user-config ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer mh/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (mh/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bd" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer")

      "f" '(:ignore t :wk "find")
      "ff" '(find-file :wk "Find file")
      "fj" '(counsel-file-jump :wk "Find file recursively")
      "fp" '(open-user-config :wk "Open personal config")
      "fc" '(reload-user-config :wk "Reload personal config")
      "fr" '(counsel-recentf :wk "Find recent files")
      "fg" '(counsel-rg :wk "Search for text (ripgrep)")

      "g" '(:ignore t :wk "git")
      "gg" '(magit-status :wk "Magit status")
      "gn" '(git-gutter:next-hunk :wk "Next hunk")
      "gp" '(git-gutter:previous-hunk :wk "Previous hunk")
      "gh" '(:ignore t :wk "git hunk")
      "ghs" '(git-gutter:stage-hunk :wk "Stage hunk")
      "ghr" '(git-gutter:revert-hunk :wk "Revert hunk")

      "o" '(:ignore o :wk "Org mode")
      "oo" '((lambda () (interactive) (find-file "~/org/notes.org")) :wk "Org mode")
      "ot" '(org-todo :wk "Change todo item state")

      "p" '(:ignore t :wk "projectile")
      "pp" '(projectile-switch-project :wk "Switch to project")
      "pf" '(projectile-find-file :wk "Find file in project")
      "pt" '(treemacs :wk "Open project drawer")

      "t" '(:ignore t :wk "terminal")
      "tt" '(multi-vterm-dedicated-toggle :wk "Toggle terminal")
      "tn" '(multi-vterm :wk "New terminal")
      )

    (mh/leader-keys
      'normal org-mode-map
      "te" '(toggle-emphasis-markers :wk "Toggle display of emphasis markers"))

    (general-define-key
     "M-C-f" 'toggle-frame-fullscreen)
    )
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src 

** Vanilla keybinds

#+begin_src emacs-lisp
  (global-set-key (kbd "C-`") 'multi-vterm-project)
  (global-set-key (kbd "C-<tab>") 'treemacs)
#+end_src

* Snippets and autocomplete

- Ivy is a completion framework
- counsel wraps emacs commands in Ivy goodness
- ivy-rich enables rich descriptions of commands in the minibuffer

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package counsel-projectile)

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-switch-buffer-transformer))
#+end_src


* Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1))
#+end_src

* IDE Features

** Language configuration

#+begin_src emacs-lisp
    (use-package web-mode)
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

    (use-package typescript-mode
      :ensure t
      :hook (typescript-mode . lsp-deferred)
      :config
      (setq typescript-indent-level 2))

    (use-package racket-mode
      :hook (racket-mode . racket-xp-mode))

    (use-package rainbow-delimiters
      :hook
      ((racket-mode . rainbow-delimiters-mode)
       (racket-repl-mode . rainbow-delimiters-mode))
       (emacs-lisp-mode . rainbow-delimiters-mode))

    (use-package paredit
      :hook
      ((racket-mode . paredit-mode)
       (racket-repl-mode . paredit-mode)))

    (add-hook 'racket-repl-mode-hook
	    (lambda ()
	      (define-key racket-repl-mode-map (kbd "M-RET") 'racket-repl-submit)))

    ;; (use-package astro-ts-mode
    ;;   :pin melpa)

    ;; (setq treesit-language-source-alist
    ;;       '((astro "https://github.com/virchau13/tree-sitter-astro")
    ;; 	(css "https://github.com/tree-sitter/tree-sitter-css")
    ;; 	(tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")))

    ;; (mapc #'treesit-install-language-grammar '(astro css tsx))
#+end_src

** Treesitter

#+begin_src emacs-lisp
  (use-package tree-sitter-langs)
  (use-package tree-sitter
    :init
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

** LSP

#+begin_src emacs-lisp
 (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)) 
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    :hook ((python-mode . lsp)
	   (web-mode . lsp)
	   (js-mode . lsp)
	   (js-jsx-mode . lsp)
	   (javascript-mode . lsp)
	   (typescript-mode . lsp)
	   (rust-mode . lsp)
	   (css-mode . lsp)
	   (scss-mode . lsp)
	   (racket-mode . lsp)

	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-treemacs 
    :after lsp 
    :commands lsp-treemacs-errors-list)

  (use-package lsp-ivy)
#+end_src

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

#+begin_src emacs-lisp
    (use-package rust-mode
      :config
      (setq rust-format-on-save t)
      (setq rust-indent-level 2)
      (add-hook 'rust-mode-hook
		(lambda () (prettify-symbols-mode))))
#+end_src

** TODO Configure formatters (eslint, etc.)

#+begin_src emacs-lisp
  (use-package format-all
    :config
    (add-hook 'prog-mode-hook 'format-all-mode)
    (add-hook 'format-all-mode-hook 'format-all-ensure-formatter))
#+end_src

** TODO Add emmet


* Org Mode

** Directory setup

#+begin_src emacs-lisp
  (setq org-directory "~/org")
  (setq org-agenda-files (list org-directory))
  (setq org-default-notes-file (concat org-directory "/notes.org"))
 #+end_src

  #+begin_src emacs-lisp
  (setq org-return-follows-link t)
#+end_src

#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

** Appearance

*** Hide emphasis markers

This is just a utility function to toggle empasis markers. It can be nice to look at an org file with the markers hidden, but also kind of a pain to edit them.
Hide /emphasis/ *markers*. Or =verbatim=. ~Code~. Or +forget the whole thing+

#+begin_src emacs-lisp
  (defun toggle-emphasis-markers ()
    (interactive)
    (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
    (font-lock-update))
#+end_src

*** Enable TOC 

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)) 
#+end_src

*** Add ~org-modern~ and associated styles

#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (global-org-modern-mode))

  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "â€¦"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?â”€
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " â”„â”„â”„â”„â”„ " "â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„")
   org-agenda-current-time-string
   "â­  now â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€")

#+end_src

Line numbers are good and helpful! Except when they're not!

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  
  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'org-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'vterm-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'racket-repl-mode-hook (lambda() (display-line-numbers-mode -1)))
#+end_src

#+begin_src emacs-lisp
  (require 'server)
    (or (server-running-p)
  (server-start))
  (require 'org-protocol)
#+end_src

* Terminal support

If one of the supposed benefits of emacs is that I don't have to context-switch out of it for most things, I'm going to need some way of easily working with terminals. I haven't loved the built-in options for doing that so I'll try vterm.

#+begin_src emacs-lisp
    (use-package vterm)

    (use-package multi-vterm
	  :config
	  (add-hook 'vterm-mode-hook
			  (lambda ()
			  (setq-local evil-insert-state-cursor 'box)
			  (evil-insert-state)))
	  (define-key vterm-mode-map [return] #'vterm-send-return)
	  (setq multi-vterm-dedicated-window-height 15)
	  (setq vterm-keymap-exceptions nil))
#+end_src

* PDFs

#+begin_src emacs-lisp
  (use-package pdf-tools)
#+end_src
