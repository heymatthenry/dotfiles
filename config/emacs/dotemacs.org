#+TITLE: heymatthenry's emacs config
#+AUTHOR: matt henry
#+PROPERTY: header-args:emacs-lisp :exports code :results none :tangle init.el
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Contents :TOC:
- [[#mission-critical][Mission critical]]
  - [[#load-elpaca-for-package-management][Load elpaca for package management]]
  - [[#load-path][Load ~$PATH~]]
  - [[#configure-core-emacs-functions][Configure core emacs functions]]
  - [[#evil-][Evil ü§ò]]
  - [[#vcs][VCS]]
- [[#ui-][UI üíÖ]]
  - [[#startup-screen][Startup screen]]
  - [[#zoom-window][Zoom window]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#pretty-icons][Pretty icons]]
  - [[#file-drawer][File drawer]]
  - [[#modeline][Modeline]]
  - [[#tab-bar][Tab Bar]]
  - [[#remove-ui-cruft][Remove UI cruft]]
- [[#put-the-mac-in-emacs][Put the Mac in emacs]]
- [[#keybindings][Keybindings]]
  - [[#which-key][Which-Key]]
  - [[#general][General]]
  - [[#vanilla-keybinds][Vanilla keybinds]]
- [[#snippets-and-autocomplete][Snippets and autocomplete]]
- [[#projectile][Projectile]]
- [[#ide-features][IDE Features]]
  - [[#language-configuration][Language configuration]]
  - [[#treesitter][Treesitter]]
  - [[#lsp][LSP]]
  - [[#configure-formatters-eslint-etc][Configure formatters (eslint, etc.)]]
  - [[#add-emmet][Add emmet]]
  - [[#docker][Docker]]
- [[#org-mode][Org Mode]]
  - [[#directory-setup][Directory setup]]
  - [[#appearance][Appearance]]
- [[#terminal-support][Terminal support]]
- [[#pdfs-and-epubs][PDFs and epubs]]
- [[#obsidian-integration][Obsidian integration]]

* Mission critical

#+begin_src emacs-lisp
  (add-to-list 'load-path
	       (expand-file-name "lib" user-emacs-directory)) 
#+end_src

** Load elpaca for package management

#+begin_src emacs-lisp
(require 'load-and-configure-elpaca)
#+end_src

** Load ~$PATH~

The ~exec-path-from-shell~ package just ensures that emacs knows about the login shell's ~$PATH~. This /shouldn't/ (?) be necessary with the Mac-friendly emacs versions available on homebrew, but either I just didn't know that and installed it when I was troubleshooting something, or the path magic didn't work. I honestly don't remember ü§∑‚Äç‚ôÇÔ∏è.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Configure core emacs functions

Don't create backup files clutter and don't ask me about killing processes

#+begin_src emacs-lisp
  (setq confirm-kill-processes nil	
	create-lockfiles nil ; don't create .# files (crashes 'npm start')
	make-backup-files nil)
#+end_src

** Evil ü§ò

#+begin_src emacs-lisp
  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-minibuffer t)

    (with-eval-after-load 'evil-maps
      (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
      (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
      (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
      (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

      (define-key evil-normal-state-map "P" 'counsel-yank-pop))

    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-tutor)
#+end_src

Some plugins from the tpope cinematic universe are in my fingers just as much as core vim commands so these ports are necessary:

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src

** VCS

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

Doom-style gitgutter config, cribbed entirely from [[https://ianyepan.github.io/posts/emacs-git-gutter/][this blog post]]

#+begin_src emacs-lisp
  (use-package git-gutter
      :hook (prog-mode . git-gutter-mode)
      :config
      (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
      :config
      (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* UI üíÖ

** Startup screen

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-items '((recents  . 5)
			  (bookmarks . 5)
			  (projects . 5)
			  (agenda . 5)
			  (registers . 5)))

  (setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)

  (setq dashboard-set-navigator t)

  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
#+end_src

** Zoom window

A thing I loved about my old vim+tmux setup was being able to temporarily make a window fullscreen and then return to the previous window configuration.


#+begin_src emacs-lisp
  (defun toggle-zoom-buffer () "Zoom buffer"
    (interactive)
    (if (= 1 (length (window-list)))
        (jump-to-register '_) 
      (progn
        (window-configuration-to-register '_)
        (delete-other-windows))))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
      :font "Menlo"
      :height 140
      :weight 'medium)

  (set-face-attribute 'variable-pitch nil
      :font "Source Sans Pro"
      :height 160
      :weight 'medium)

  (set-face-attribute 'fixed-pitch nil
      :font "Menlo"
      :height 140
      :weight 'medium)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (load-theme 'doom-moonlight t)
    (load-theme 'doom-challenger-deep t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable treemacs theme
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Pretty icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** File drawer

#+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :config

      (progn
	(setq treemacs-position 'right)))

    (use-package treemacs-evil
      :after (treemacs evil))

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once))

    (use-package treemacs-magit
      :after (treemacs magit))
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Tab Bar

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :init
    (setq centaur-tabs-enable-key-bindings t)
  
    :config
    (setq centaur-tabs-style "bar"
          centaur-tabs-height 32
          centaur-tabs-set-icons t
          centaur-tabs-show-new-tab-button t
          centaur-tabs-set-modified-marker t
          centaur-tabs-show-navigation-buttons t
          centaur-tabs-set-bar 'under
          centaur-tabs-show-count nil
          ;; centaur-tabs-label-fixed-length 15
          ;; centaur-tabs-gray-out-icons 'buffer
          ;; centaur-tabs-plain-icons t
          x-underline-at-descent-line t
          centaur-tabs-left-edge-margin nil)
    (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
    (centaur-tabs-headline-match)
    ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
    ;; (setq centaur-tabs-adjust-buffer-order t)
    (centaur-tabs-mode t)
    (setq uniquify-separator "/")
    (setq uniquify-buffer-name-style 'forward)
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

  Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
  All buffer name start with * will group to \"Emacs\".
  Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
        ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
        ;; "Remote")
        ((or (string-equal "*" (substring (buffer-name) 0 1))
             (memq major-mode '(magit-process-mode
                                magit-status-mode
                                magit-diff-mode
                                magit-log-mode
                                magit-file-mode
                                magit-blob-mode
                                magit-blame-mode
                                )))
         "Emacs")
        ((derived-mode-p 'prog-mode)
         "Editing")
        ((derived-mode-p 'dired-mode)
         "Dired")
        ((memq major-mode '(helpful-mode
                            help-mode))
         "Help")
        ((memq major-mode '(org-mode
                            org-agenda-clockreport-mode
                            org-src-mode
                            org-agenda-mode
                            org-beamer-mode
                            org-indent-mode
                            org-bullets-mode
                            org-cdlatex-mode
                            org-agenda-log-mode
                            diary-mode))
         "OrgMode")
        (t
         (centaur-tabs-get-group-name (current-buffer))))))
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (term-mode . centaur-tabs-local-mode)
    (calendar-mode . centaur-tabs-local-mode)
    (org-agenda-mode . centaur-tabs-local-mode)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    ("C-S-<prior>" . centaur-tabs-move-current-tab-to-left)
    ("C-S-<next>" . centaur-tabs-move-current-tab-to-right)
    (:map evil-normal-state-map
          ("g t" . centaur-tabs-forward)
          ("g T" . centaur-tabs-backward)))
#+end_src

** Remove UI cruft

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

* Put the Mac in emacs

#+begin_src emacs-lisp
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+end_src

* Keybindings

** Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** General

#+begin_src emacs-lisp
  (defun open-user-config ()
    (interactive)
    (find-file (concat user-emacs-directory "dotemacs.org")))

  (defun reload-user-config ()
    (interactive)
    (org-babel-tangle)
    (load-file user-init-file)
    (load-file user-init-file))

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer mh/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (mh/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bd" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer")
      "bz" '(toggle-zoom-buffer :wk "Toggle zoom buffer")

      "f" '(:ignore t :wk "find")
      "ff" '(find-file :wk "Find file")
      "fj" '(counsel-file-jump :wk "Find file recursively")
      "fp" '(open-user-config :wk "Open personal config")
      "fc" '(reload-user-config :wk "Reload personal config")
      "fr" '(counsel-recentf :wk "Find recent files")
      "fg" '(counsel-rg :wk "Search for text (ripgrep)")

      "g" '(:ignore t :wk "git")
      "gg" '(magit-status :wk "Magit status")
      "gn" '(git-gutter:next-hunk :wk "Next hunk")
      "gp" '(git-gutter:previous-hunk :wk "Previous hunk")
      "gh" '(:ignore t :wk "git hunk")
      "ghs" '(git-gutter:stage-hunk :wk "Stage hunk")
      "ghr" '(git-gutter:revert-hunk :wk "Revert hunk")

      "o" '(:ignore o :wk "Org mode")
      "oj" '(org-journal-new-entry :wk "New org-journal entry")
      "oo" '((lambda () (interactive) (find-file "~/org/notes.org")) :wk "Org mode")
      "ot" '(org-todo :wk "Change todo item state")

      "p" '(:ignore t :wk "projectile")
      "pp" '(projectile-switch-project :wk "Switch to project")
      "pf" '(projectile-find-file :wk "Find file in project")
      "pt" '(treemacs :wk "Open project drawer")

      "t" '(:ignore t :wk "terminal")
      "tt" '(multi-vterm-dedicated-toggle :wk "Toggle terminal")
      "tn" '(multi-vterm :wk "New terminal")
      )

    (mh/leader-keys
      'normal org-mode-map
      "te" '(toggle-emphasis-markers :wk "Toggle display of emphasis markers"))

    (general-define-key
     "M-C-f" 'toggle-frame-fullscreen)
    )
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src 

** Vanilla keybinds

#+begin_src emacs-lisp
  (global-set-key (kbd "C-`") 'multi-vterm-project)
  (global-set-key (kbd "C-<tab>") 'treemacs)
#+end_src

* Snippets and autocomplete

- Ivy is a completion framework
- counsel wraps emacs commands in Ivy goodness
- ivy-rich enables rich descriptions of commands in the minibuffer

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package counsel-projectile)

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-switch-buffer-transformer))
#+end_src


* Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1))
#+end_src

* IDE Features

** Language configuration

#+begin_src emacs-lisp
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  (use-package typescript-mode
    :ensure t
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

  (use-package julia-mode)

  (use-package julia-snail
    :hook
    (julia-mode . julia-snail-mode))

  (use-package racket-mode
    :hook (racket-mode . racket-xp-mode))

  (use-package rainbow-delimiters
    :hook
    ((racket-mode . rainbow-delimiters-mode)
     (racket-repl-mode . rainbow-delimiters-mode))
     (emacs-lisp-mode . rainbow-delimiters-mode))

  (use-package paredit
    :hook
    ((racket-mode . paredit-mode)
     (racket-repl-mode . paredit-mode)))

  (add-hook 'racket-repl-mode-hook
          (lambda ()
            (define-key racket-repl-mode-map (kbd "M-RET") 'racket-repl-submit)))

  ;; (use-package astro-ts-mode
  ;;   :pin melpa)

  ;; (setq treesit-language-source-alist
  ;;       '((astro "https://github.com/virchau13/tree-sitter-astro")
  ;; 	(css "https://github.com/tree-sitter/tree-sitter-css")
  ;; 	(tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")))

  ;; (mapc #'treesit-install-language-grammar '(astro css tsx))
#+end_src

** Treesitter

#+begin_src emacs-lisp
  (use-package tree-sitter-langs)
  (use-package tree-sitter
    :init
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

** LSP

#+begin_src emacs-lisp
   (use-package flycheck
      :ensure t
      :init (global-flycheck-mode)) 

   (add-hook
      'python-mode-hook
      '(lambda ()
          (setq flycheck-enabled-checkers '(python-flake8))
          (setq flycheck-disabled-checkers '(python-mypy))
          (flycheck-select-checker 'python-flake8)))
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    :hook ((python-mode . lsp)
	   (web-mode . lsp)
	   (js-mode . lsp)
	   (js-jsx-mode . lsp)
	   (javascript-mode . lsp)
	   (julia-mode . lsp)
	   (typescript-mode . lsp)
	   (rust-mode . lsp)
	   (css-mode . lsp)
	   (scss-mode . lsp)
	   (racket-mode . lsp)

	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-treemacs 
    :after lsp 
    :commands lsp-treemacs-errors-list)

  (use-package lsp-ivy)
#+end_src

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

#+begin_src emacs-lisp
    (use-package rust-mode
      :config
      (setq rust-format-on-save t)
      (setq rust-indent-level 2)
      (add-hook 'rust-mode-hook
		(lambda () (prettify-symbols-mode))))
#+end_src

** TODO Configure formatters (eslint, etc.)

#+begin_src emacs-lisp
  (use-package format-all
    :config
    (add-hook 'prog-mode-hook 'format-all-mode)
    (add-hook 'format-all-mode-hook 'format-all-ensure-formatter))
#+end_src

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src

** TODO Add emmet

** Docker

#+begin_src emacs-lisp
  (use-package docker
    :bind ("C-c d" . docker))
#+end_src

* Org Mode

** Directory setup

#+begin_src emacs-lisp
  (setq org-directory "~/org")
  (setq org-agenda-files (list org-directory))
  (setq org-default-notes-file (concat org-directory "/notes.org"))
 #+end_src

  #+begin_src emacs-lisp
  (setq org-return-follows-link t)
#+end_src

** Appearance

*** Hide emphasis markers

This is just a utility function to toggle empasis markers. It can be nice to look at an org file with the markers hidden, but also kind of a pain to edit them.
Hide /emphasis/ *markers*. Or =verbatim=. ~Code~. Or +forget the whole thing+

#+begin_src emacs-lisp
  (defun toggle-emphasis-markers ()
    (interactive)
    (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
    (font-lock-update))
#+end_src

*** Enable TOC 

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)) 
#+end_src

*** Add ~org-modern~ and associated styles

#+begin_src emacs-lisp
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "‚Ä¶"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?‚îÄ
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ " "‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ")
   org-agenda-current-time-string
   "‚≠† now ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")


  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** Org Journal

#+begin_src emacs-lisp
(use-package org-journal
  :ensure t
  :defer t
  :init
  ;; Change default prefix key; needs to be set before loading org-journal
  (setq org-journal-prefix-key "C-c j ")
  :config
  (setq org-journal-dir "~/org/journal/"
        org-journal-date-format "%A, %d %B %Y"))
#+end_src


Line numbers are good and helpful! Except when they're not!

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  
  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'org-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'vterm-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'racket-repl-mode-hook (lambda() (display-line-numbers-mode -1)))
#+end_src

#+begin_src emacs-lisp
  (require 'server)
    (or (server-running-p)
  (server-start))
  (require 'org-protocol)
#+end_src

* Terminal support

If one of the supposed benefits of emacs is that I don't have to context-switch out of it for most things, I'm going to need some way of easily working with terminals. I haven't loved the built-in options for doing that so I'll try vterm.

#+begin_src emacs-lisp
    (use-package vterm)

    (use-package multi-vterm
	  :config
	  (add-hook 'vterm-mode-hook
			  (lambda ()
			  (setq-local evil-insert-state-cursor 'box)
			  (evil-insert-state)))
	  (define-key vterm-mode-map [return] #'vterm-send-return)
	  (setq multi-vterm-dedicated-window-height 15)
	  (setq vterm-keymap-exceptions nil))
#+end_src

* PDFs and epubs

#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode))

  (use-package nov
    :mode ("\\.epub\\'" . nov-mode))
#+end_src

* Obsidian integration

#+begin_src emacs-lisp
(use-package obsidian
  :demand t
  :config
  (obsidian-specify-path "~/Documents/Notes")
  (global-obsidian-mode t)
  :custom
  ;; This directory will be used for `obsidian-capture' if set.
  (obsidian-inbox-directory "Inbox")
  :bind (:map obsidian-mode-map
  ;; Replace C-c C-o with Obsidian.el's implementation. It's ok to use another key binding.
  ("C-c C-o" . obsidian-follow-link-at-point)
  ;; Jump to backlinks
  ("C-c C-b" . obsidian-backlink-jump)
  ;; If you prefer you can use `obsidian-insert-link'
  ("C-c C-l" . obsidian-insert-wikilink)))
#+end_src
